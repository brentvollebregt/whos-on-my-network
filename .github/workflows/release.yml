on:
  push:
    tags:
      - "v*"

name: Build and Upload Release Assets

jobs:
  create-release:
    name: Create Release and Upload Built Assets
    runs-on: windows-latest
    steps:
      # Checkout
      - name: Checkout code
        uses: actions/checkout@v2

      # Install Python dependencies so the module can be run
      - name: Install Module Dependencies
        run: python -m pip install -r requirements.txt

      # Get current module version
      - name: Get Module Version
        id: get_module_version
        shell: bash
        run: |
          echo "Module version: $(python run.py --version)"
          echo "::set-output name=version::$(python run.py --version)"

      # Fail if the tag and version do not match. Also match this to github.ref to make sure we aren't creating a release for an old version
      - name: Fail on Tag and Version Mismatch
        if: (!endsWith(github.ref, steps.get_module_version.outputs.version))
        run: |
          echo "Ref that triggered release: ${{ github.ref }}"
          echo "Current module version: ${{ steps.get_module_version.outputs.version }}"
          exit 1

      # Clear out __pycache__ directories
      - name: Clear __pycache__
        shell: bash
        run: find . -name __pycache__ -type d -print0|xargs -0 rm -r --

      # Build the React frontend (will be copied into the python module)
      - name: Build Webapp
        run: |
          cd webapp
          npm ci
          npm run build
          cd ../
        env:
          CI: false

      # Zip up the module that now contains has the build webapp
      - name: Zip Module
        shell: pwsh
        run: Compress-Archive -Path .\whos_on_my_network, README.md, requirements.txt, run.py -CompressionLevel Optimal -DestinationPath .\whos_on_my_network.zip

      # Build a binary that uses the default method of scanning
      - name: Build Binary
        shell: bash
        run: |
          python -m pip install pyinstaller
          sh package.sh

      # Zip up the binary
      - name: Zip Module
        shell: pwsh
        run: Compress-Archive -Path whos_on_my_network.exe, README.md -CompressionLevel Optimal -DestinationPath .\whos_on_my_network_binary.zip

      # Create the release for this version
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_module_version.outputs.version }}
          release_name: Release ${{ steps.get_module_version.outputs.version }}
          draft: false
          prerelease: false

      # Upload the zip to the created release
      - name: Upload Built Module to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./whos_on_my_network.zip
          asset_name: whos_on_my_network.zip
          asset_content_type: application/zip

      # Upload the zip to the created release
      - name: Upload Binary to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./whos_on_my_network_binary.zip
          asset_name: whos_on_my_network_binary.zip
          asset_content_type: application/zip
